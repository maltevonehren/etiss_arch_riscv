import "rv_base/RISCVBase.core_desc"
import "rv_base/RV32I.core_desc"
import "rv_base/RVA.core_desc"

InstructionSet tum_ret extends RISCVBase {
    architectural_state {
        signed<32> ETISS_RETURNCODE_NOERROR = 0;
        signed<32> ETISS_RETURNCODE_GENERALERROR = -1;
        signed<32> ETISS_RETURNCODE_RELOADBLOCKS = -2;
        signed<32> ETISS_RETURNCODE_RELOADCURRENTBLOCK = -3;
        signed<32> ETISS_RETURNCODE_DBUS_READ_ERROR = -5;
        signed<32> ETISS_RETURNCODE_DBUS_WRITE_ERROR = -6;
        signed<32> ETISS_RETURNCODE_IBUS_READ_ERROR = -7;
        signed<32> ETISS_RETURNCODE_IBUS_WRITE_ERROR = -8;
        signed<32> ETISS_RETURNCODE_INTERRUPT = -9;
        signed<32> ETISS_RETURNCODE_RESET = -10;
        signed<32> ETISS_RETURNCODE_ILLEGALINSTRUCTION = -11;
        signed<32> ETISS_RETURNCODE_ILLEGALJUMP = -12;
        signed<32> ETISS_RETURNCODE_INSTR_PAGEFAULT = -13;
        signed<32> ETISS_RETURNCODE_LOAD_PAGEFAULT = -14;
        signed<32> ETISS_RETURNCODE_STORE_PAGEFAULT = -15;
        signed<32> ETISS_RETURNCODE_GDBNOERROR = -16;
        signed<32> ETISS_RETURNCODE_SYSCALL = -17;
        signed<32> ETISS_RETURNCODE_PAGEFAULT = -18;
        signed<32> ETISS_RETURNCODE_BREAKPOINT = -19;
        signed<32> ETISS_RETURNCODE_CPUFINISHED = 1 << 31;
        signed<32> ETISS_RETURNCODE_CPUTERMINATED = 0x80000001;
        signed<32> ETISS_RETURNCODE_JITERROR = -32;
        signed<32> ETISS_RETURNCODE_JITCOMPILATIONERROR = -33;
        signed<32> ETISS_RETURNCODE_ARCHERROR = -34;
        signed<32> ETISS_RETURNCODE_EMULATIONNOTSUPPORTED = -35;
        signed<32> ETISS_RETURNCODE_INVALIDSYSTEM = -36;
        signed<32> ETISS_RETURNCODE_TEMPORARY0 = -128;
        signed<32> ETISS_RETURNCODE_TEMPORARY1 = -129;
        signed<32> ETISS_RETURNCODE_TEMPORARY2 = -130;
        signed<32> ETISS_RETURNCODE_TEMPORARY3 = -131;
        signed<32> ETISS_RETURNCODE_TEMPORARY4 = -132;
        signed<32> ETISS_RETURNCODE_TEMPORARY5 = -133;
        signed<32> ETISS_RETURNCODE_TEMPORARY6 = -134;
        signed<32> ETISS_RETURNCODE_TEMPORARY7 = -135;

        signed<32> RV_MISALIGNED_FETCH = 0x00;
        signed<32> RV_FETCH_ACCESS = 0x01;
        signed<32> RV_ILLEGAL_INSTRUCTION = 0x02;
        signed<32> RV_BREAKPOINT = 0x03;
        signed<32> RV_MISALIGNED_LOAD = 0x04;
        signed<32> RV_LOAD_ACCESS = 0x05;
        signed<32> RV_MISALIGNED_STORE = 0x06;
        signed<32> RV_STORE_ACCESS = 0x07;
        signed<32> RV_USER_ECALL = 0x08;
        signed<32> RV_SUPERVISOR_ECALL = 0x09;
        signed<32> RV_VIRTUAL_SUPERVISOR_ECALL = 0x0A;
        signed<32> RV_MACHINE_ECALL = 0x0B;
        signed<32> RV_FETCH_PAGE_FAULT = 0x0C;
        signed<32> RV_LOAD_PAGE_FAULT = 0x0D;
        signed<32> RV_STORE_PAGE_FAULT = 0x0F;
        signed<32> RV_FETCH_GUEST_PAGE_FAULT = 0x14;
        signed<32> RV_LOAD_GUEST_PAGE_FAULT = 0x15;
        signed<32> RV_VIRTUAL_INSTRUCTION = 0x16;
        signed<32> RV_STORE_GUEST_PAGE_FAULT = 0x17;
    }

    functions {
        signed<32> raise(int irq, int mcause) [[etiss_exc_entry]] {
            if (irq != 0) {
                return ETISS_RETURNCODE_INTERRUPT;
            } else {
                if (mcause == RV_MISALIGNED_FETCH || mcause == RV_FETCH_ACCESS) return ETISS_RETURNCODE_IBUS_READ_ERROR;
                if (mcause == RV_ILLEGAL_INSTRUCTION) return ETISS_RETURNCODE_ILLEGALINSTRUCTION;
                if (mcause == RV_BREAKPOINT) return ETISS_RETURNCODE_BREAKPOINT;
                if (mcause == RV_MISALIGNED_LOAD || mcause == RV_LOAD_ACCESS) return ETISS_RETURNCODE_DBUS_READ_ERROR;
                if (mcause == RV_MISALIGNED_STORE || mcause == RV_STORE_ACCESS) return ETISS_RETURNCODE_DBUS_WRITE_ERROR;
                if (mcause == RV_USER_ECALL || mcause == RV_SUPERVISOR_ECALL || mcause == RV_VIRTUAL_SUPERVISOR_ECALL || mcause == RV_MACHINE_ECALL) return ETISS_RETURNCODE_SYSCALL;
                if (mcause == RV_FETCH_PAGE_FAULT || mcause == RV_FETCH_GUEST_PAGE_FAULT) return ETISS_RETURNCODE_INSTR_PAGEFAULT;
                if (mcause == RV_LOAD_PAGE_FAULT || mcause == RV_LOAD_GUEST_PAGE_FAULT) return ETISS_RETURNCODE_LOAD_PAGEFAULT;
                if (mcause == RV_STORE_PAGE_FAULT || mcause == RV_STORE_GUEST_PAGE_FAULT) return ETISS_RETURNCODE_STORE_PAGEFAULT;
                return ETISS_RETURNCODE_ILLEGALINSTRUCTION;
            }
        }
    }

	instructions {
        URET [[no_cont]] {
            encoding: 0b0000000 :: 0b00010 :: 0b00000 :: 0b000 :: 0b00000 :: 0b1110011;
            behavior: {
				CSR[3088] = 0;
				CSR[0] ^= ((CSR[0] & 0x10) >> 4) ^ (CSR[0] & 0x01);
				PC = CSR[65];
				CSR[768] = CSR[0];
				CSR[256] = CSR[0];
			}
        }

        SRET [[no_cont]] {
            encoding: 7'b0001000 :: 5'b00010 :: 5'b00000 :: 3'b000 :: 5'b00000 :: 7'b1110011;
            behavior: {
				CSR[3088] = (CSR[256] & 0x100) >> 8;
				CSR[256] ^= (CSR[256] & 0x100);
				CSR[256] ^= ((CSR[256] & 0x20) >> 4) ^ (CSR[256] & 0x2);
				PC = CSR[321];
				CSR[768]= CSR[256];
				CSR[0]=CSR[256];
			}
        }

        MRET [[no_cont]] {
            encoding: 7'b0011000 :: 5'b00010 :: 5'b00000 :: 3'b000 :: 5'b00000 :: 7'b1110011;
            behavior: {
				CSR[3088] = (CSR[768] & 0x1800) >> 11;
				CSR[768] ^= (CSR[768] & 0x1800);
				CSR[768] ^= ((CSR[768] & 0x80) >> 4) ^ (CSR[768] & 0x8);
				PC = CSR[833];
				CSR[0] = CSR[768];
				CSR[256] = CSR[768];
			}
        }
	}
}

InstructionSet tum_csr extends Zicsr {
    architectural_state {
        unsigned int FFLAGS_N = 0x001;
        unsigned int FRM_N = 0x002;
        unsigned int FCSR_N = 0x003;
    }

    functions {
        unsigned<XLEN> csr_read(unsigned int csr) {
            if (csr == FFLAGS_N) return CSR[FCSR_N] & 0x1F;
            if (csr == FRM_N) return (CSR[FCSR_N] >> 5) & 0x07;
            return CSR[csr];
        }

        void csr_write(unsigned int csr, unsigned<XLEN> val) {
            if (csr == FFLAGS_N) CSR[FCSR_N] = (CSR[FCSR_N] & (0x07 << 5)) | (val & 0x1F);
            else if (csr == FRM_N) CSR[FCSR_N] = ((val & 0x07) << 5) | (CSR[FCSR_N] & 0x1F);
            else if (csr == FCSR_N) CSR[FCSR_N] = val & 0xFF;
            else CSR[csr] = val;
        }
    }

    instructions {
        CSRRW {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b001 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if ((rd % RFS) != 0) {
                    unsigned<XLEN> xrd = csr_read(csr);
                    csr_write(csr, xrs1);
                    // make sure Xrd is updated once CSR write succeeds
                    X[rd % RFS] = xrd;
                } else {
                    csr_write(csr, xrs1);
                }
            }
        }

        CSRRS {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if (rs1 != 0) csr_write(csr, xrd | xrs1);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRC {
            encoding: csr[11:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {name(rs1)}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                unsigned<XLEN> xrs1 = X[rs1 % RFS];
                if (rs1 != 0) csr_write(csr, xrd & ~xrs1);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRWI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b101 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                csr_write(csr, (unsigned<XLEN>)zimm);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRSI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b110 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                if (zimm != 0) csr_write(csr, xrd | (unsigned<XLEN>)zimm);
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }

        CSRRCI {
            encoding: csr[11:0] :: zimm[4:0] :: 3'b111 :: rd[4:0] :: 7'b1110011;
            assembly:"{name(rd)}, {csr}, {zimm:#0x}";
            behavior: {
                unsigned<XLEN> xrd = csr_read(csr);
                if (zimm != 0) csr_write(csr, xrd & ~((unsigned<XLEN>)zimm));
                if ((rd % RFS) != 0) X[rd % RFS] = xrd;
            }
        }
    }
}

InstructionSet tum_rva extends RV32A {
    architectural_state {
        register unsigned<XLEN> RES_ADDR = -1;
    }

    instructions {
        LRW {
            encoding: 5'b00010 :: aq[0:0] :: rl[0:0]  :: 5'b00000 :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                signed<32> res = (signed<32>)MEM[offs];
                RES_ADDR = offs;
                if (rd) X[rd % RFS] = (signed<XLEN>)res;
            }
        }

        SCW {
            encoding: 5'b00011 :: aq[0:0] :: rl[0:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0101111;
            assembly: "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(aq)}, {name(rl)}";
            behavior: {
                unsigned<XLEN> offs = X[rs1 % RFS];
                if (RES_ADDR == offs) MEM[offs] = (signed<32>)X[rs2 % RFS];
                if (rd) X[rd % RFS] = RES_ADDR != offs;
                RES_ADDR = -1;
            }
        }
    }
}


InstructionSet tum_semihosting extends RV32I {
    instructions {
        EBREAK [[no_cont]] {
            encoding: 0b000000000001 :: 5'b00000 :: 3'b000 :: 5'b00000 :: 7'b1110011;
            behavior: {
                if (etiss_semihost_enabled()
                 && (unsigned<32>)MEM[PC - 4] == 0x01f01013 // slli x0, x0, 0x1f   Entry NOP
                 && (unsigned<32>)MEM[PC + 0] == 0x00100073 // ebreak              Break to debugger
                 && (unsigned<32>)MEM[PC + 4] == 0x40705013 // srai x0, x0, 7      NOP encoding the semihosting call number 7
                 ) {
                    unsigned<XLEN> operation = X[10];
                    unsigned<XLEN> parameter = X[11];
                    X[10] = (signed<XLEN>)etiss_semihost(XLEN, operation, parameter);
                } else {
                    raise(0, 3);
                }
            }
        }
    }
    
    functions {
        extern unsigned<8> etiss_semihost_enabled();
        extern signed<64> etiss_semihost(unsigned<32> XLEN, unsigned<64> operation, unsigned<64> parameter) [[etiss_needs_arch]];
    }
}
